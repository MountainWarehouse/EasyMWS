using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using MountainWarehouse.EasyMWS.Data;
using MountainWarehouse.EasyMWS.Enums;
using MountainWarehouse.EasyMWS.Helpers;
using MountainWarehouse.EasyMWS.Logging;
using MountainWarehouse.EasyMWS.Model;
using MountainWarehouse.EasyMWS.Services;
using MountainWarehouse.EasyMWS.WebService.MarketplaceWebService;
using MountainWarehouse.EasyMWS.WebService.MarketplaceWebService.Model;
using Newtonsoft.Json;

namespace MountainWarehouse.EasyMWS.Processors
{
    internal class RequestReportProcessor : IRequestReportProcessor
    {
	    private readonly IMarketplaceWebServiceClient _marketplaceWebServiceClient;
	    private readonly IEasyMwsLogger _logger;
		private readonly EasyMwsOptions _options;
	    private readonly AmazonRegion _region;
	    private readonly string _merchantId;

	    internal RequestReportProcessor(AmazonRegion region, string merchantId, IMarketplaceWebServiceClient marketplaceWebServiceClient, IEasyMwsLogger logger, EasyMwsOptions options)
	    {
		    _region = region;
		    _merchantId = merchantId;
		    _options = options;
		    _logger = logger;
			_marketplaceWebServiceClient = marketplaceWebServiceClient;
	    }

	    public ReportRequestEntry GetNextFromQueueOfReportsToRequest(IReportRequestCallbackService reportRequestService)
	    {
			return string.IsNullOrEmpty(_merchantId)
				? null
				: reportRequestService.GetAll()
					.FirstOrDefault(rrc => rrc.AmazonRegion == _region && rrc.MerchantId == _merchantId
					                        && rrc.RequestReportId == null
					                        && RetryIntervalHelper.IsRetryPeriodAwaited(rrc.LastRequested, rrc.ReportRequestRetryCount,
						                        _options.ReportRequestRetryInitialDelay, _options.ReportRequestRetryInterval,
						                        _options.ReportRequestRetryType)
					);
	    }



	    public void RequestReportFromAmazon(IReportRequestCallbackService reportRequestService, ReportRequestEntry reportRequestEntry)
	    {
		    var missingInformationExceptionMessage = "Cannot request report from amazon due to missing report request information";

			if (reportRequestEntry?.ReportRequestData == null) throw new ArgumentNullException($"{missingInformationExceptionMessage}: Report request data is null.");
		    if (string.IsNullOrEmpty(reportRequestEntry.ReportType)) throw new ArgumentException($"{missingInformationExceptionMessage}: Report Type is missing.");

			var reportRequestData = reportRequestEntry.GetPropertiesContainer();

			_logger.Info($"Attempting to request the next report in queue from Amazon: {reportRequestEntry.RegionAndTypeComputed}.");

			var reportRequest = new RequestReportRequest
			{
				Merchant = reportRequestEntry.MerchantId,
				ReportType = reportRequestEntry.ReportType
			};

		    if (reportRequestData.MarketplaceIdList != null)
			    reportRequest.MarketplaceIdList = new IdList {Id = reportRequestData.MarketplaceIdList};
			if (reportRequestData.StartDate.HasValue)
			    reportRequest.StartDate = reportRequestData.StartDate.Value;
		    if (reportRequestData.EndDate.HasValue)
			    reportRequest.EndDate = reportRequestData.EndDate.Value;
		    if (!string.IsNullOrEmpty(reportRequestData.ReportOptions))
			    reportRequest.ReportOptions = reportRequestData.ReportOptions;

		    try
		    {
			    var reportResponse = _marketplaceWebServiceClient.RequestReport(reportRequest);
			    var requestId = reportResponse?.ResponseHeaderMetadata?.RequestId ?? "unknown";
			    var timestamp = reportResponse?.ResponseHeaderMetadata?.Timestamp ?? "unknown";
			    _logger.Info($"Request to MWS.RequestReport was successful! [RequestId:'{requestId}',Timestamp:'{timestamp}']",
				    new RequestInfo(timestamp, requestId));

			    var reportRequestId = reportResponse?.RequestReportResult?.ReportRequestInfo?.ReportRequestId;
			    reportRequestEntry.RequestReportId = reportRequestId;
			    reportRequestEntry.LastRequested = DateTime.UtcNow;

				if (string.IsNullOrEmpty(reportRequestId))
			    {
					reportRequestEntry.ReportRequestRetryCount++;
				    reportRequestEntry.LastRequested = DateTime.UtcNow;
					_logger.Warn($"AmazonMWS request succeeded for {reportRequestEntry.RegionAndTypeComputed}. But ReportRequestId was not generated by Amazon. Placing report request in retry queue. Retry count : {reportRequestEntry.ReportRequestRetryCount}");
				}
			    else
			    {
				    reportRequestEntry.ReportRequestRetryCount = 0;
					_logger.Info($"AmazonMWS request succeeded for {reportRequestEntry.RegionAndTypeComputed}. ReportRequestId:'{reportRequestId}'");
				}

			    reportRequestService.Update(reportRequestEntry);
			}
		    catch (MarketplaceWebServiceException e) when (e.StatusCode == HttpStatusCode.BadRequest && IsAmazonErrorCodeFatal(e.ErrorCode))
		    {
			    _logger.Error($"Request to MWS.RequestReport failed! [HttpStatusCode:'{e.StatusCode}', ErrorType:'{e.ErrorType}', ErrorCode:'{e.ErrorCode}', Message: '{e.Message}']", e);
			    reportRequestService.Delete(reportRequestEntry);
				_logger.Warn($"AmazonMWS request failed for {reportRequestEntry.RegionAndTypeComputed}. The report request was removed from queue.");
			}
		    catch (MarketplaceWebServiceException e) when (IsAmazonErrorCodeNonFatal(e.ErrorCode))
		    {
			    _logger.Error($"Request to MWS.RequestReport failed! [HttpStatusCode:'{e.StatusCode}', ErrorType:'{e.ErrorType}', ErrorCode:'{e.ErrorCode}', Message: '{e.Message}']", e);
			    reportRequestEntry.ReportRequestRetryCount++;
			    reportRequestEntry.LastRequested = DateTime.UtcNow;
			    reportRequestService.Update(reportRequestEntry);
				_logger.Warn($"AmazonMWS request failed for {reportRequestEntry.RegionAndTypeComputed}. Reason: ReportRequestId not generated by Amazon. Placing report request in retry queue. Retry count : {reportRequestEntry.ReportRequestRetryCount}");
		    }
		    catch (Exception e)
		    {
			    _logger.Error($"Request to MWS.RequestReport failed! [Message: '{e.Message}']", e);
				reportRequestEntry.ReportRequestRetryCount++;
			    reportRequestEntry.LastRequested = DateTime.UtcNow;
			    reportRequestService.Update(reportRequestEntry);
				_logger.Warn($"AmazonMWS request failed for {reportRequestEntry.RegionAndTypeComputed}. Reason: ReportRequestId not generated by Amazon. Placing report request in retry queue. Retry count : {reportRequestEntry.ReportRequestRetryCount}");
			}
		    finally{
			    
			    reportRequestService.SaveChanges();
			}
	    }

	    private bool IsAmazonErrorCodeFatal(string errorCode)
	    {
		    var fatalErrorCodes = new List<string>
		    {
			    "AccessToReportDenied",
			    "InvalidReportId",
			    "InvalidReportType",
			    "InvalidRequest",
			    "ReportNoLongerAvailable"
		    };

		    return fatalErrorCodes.Contains(errorCode);
	    }

	    private bool IsAmazonErrorCodeNonFatal(string errorCode)
	    {
			var nonFatalErrorCodes = new List<string>
		    {
				"ReportNotReady",
				"InvalidScheduleFrequency"
		    };

		    return nonFatalErrorCodes.Contains(errorCode) || !IsAmazonErrorCodeFatal(errorCode);
		}

	    public IEnumerable<string> GetAllPendingReportFromQueue(IReportRequestCallbackService reportRequestService)
	    {
			    return string.IsNullOrEmpty(_merchantId)
				    ? new List<string>().AsEnumerable()
				    : reportRequestService
						.Where(rrcs => rrcs.AmazonRegion == _region && rrcs.MerchantId == _merchantId
					                   && rrcs.RequestReportId != null
					                   && rrcs.GeneratedReportId == null)
					    .Select(r => r.RequestReportId);
	    }

	    public List<(string ReportRequestId, string GeneratedReportId, string ReportProcessingStatus)> GetReportProcessingStatusesFromAmazon(IEnumerable<string> requestIdList, string merchant)
	    {
		    _logger.Info($"Attempting to request report processing statuses for all reports in queue.");

		    var request = new GetReportRequestListRequest() {ReportRequestIdList = new IdList(), Merchant = merchant};
		    request.ReportRequestIdList.Id.AddRange(requestIdList);

		    try
		    {
			    var response = _marketplaceWebServiceClient.GetReportRequestList(request);
			    var requestId = response?.ResponseHeaderMetadata?.RequestId ?? "unknown";
			    var timestamp = response?.ResponseHeaderMetadata?.Timestamp ?? "unknown";
			    _logger.Info(
				    $"Request to MWS.GetReportRequestList was successful! [RequestId:'{requestId}',Timestamp:'{timestamp}']",
				    new RequestInfo(timestamp, requestId));

			    var responseInformation =
				    new List<(string ReportRequestId, string GeneratedReportId, string ReportProcessingStatus)>();

			    if (response != null)
			    {
				    foreach (var reportRequestInfo in response.GetReportRequestListResult.ReportRequestInfo)
				    {
					    responseInformation.Add(
						    (reportRequestInfo.ReportRequestId, reportRequestInfo.GeneratedReportId, reportRequestInfo
							    .ReportProcessingStatus));
				    }
			    }

			    return responseInformation;

		    }
		    catch (MarketplaceWebServiceException e)
		    {
				_logger.Error($"Request to MWS.GetReportRequestList failed! [Message: '{e.Message}', HttpStatusCode:'{e.StatusCode}', ErrorType:'{e.ErrorType}', ErrorCode:'{e.ErrorCode}']", e);
			    return null;
			}
			catch (Exception e)
		    {
				_logger.Error($"Request to MWS.GetReportRequestList failed! [Message: '{e.Message}']", e);
			    return null;
			}
	    }

	    public void CleanupReportRequests(IReportRequestCallbackService reportRequestService)
	    {
			_logger.Info("Executing cleanup of report requests queue.");
			var expiredReportRequests = reportRequestService.GetAll()
				.Where(rrc => (rrc.AmazonRegion == _region && rrc.MerchantId == _merchantId) && rrc.Details == null && IsRequestRetryCountExceeded(rrc));

			foreach (var expiredReport in expiredReportRequests)
			{
				reportRequestService.Delete(expiredReport);
				_logger.Warn($"Report request {expiredReport.RegionAndTypeComputed} deleted from queue. Reason: Failure while trying to request the report from Amazon. Retry count exceeded : {_options.ReportRequestMaxRetryCount}.");
			}

		    var entriesWithExpirationPeriodExceeded = reportRequestService.GetAll()
			    .Where(rrc => (rrc.AmazonRegion == _region && rrc.MerchantId == _merchantId) && IsExpirationPeriodExceeded(rrc));

		    foreach (var expiredReport in entriesWithExpirationPeriodExceeded)
		    {
			    reportRequestService.Delete(expiredReport);
			    _logger.Warn($"Report request {expiredReport.RegionAndTypeComputed} deleted from queue. Reason: Expiration period of '{_options.ReportDownloadRequestEntryExpirationPeriod.Hours} hours' was exceeded.");
		    }

			var entriesWithCallbackInvocationRetryCountExceeded = reportRequestService.GetAll()
				.Where(rrc => (rrc.AmazonRegion == _region && rrc.MerchantId == _merchantId) && rrc.Details != null && IsReportRequestEntryCallbackInvocationRetryCountExceeded(rrc));

		    foreach (var expiredReport in entriesWithCallbackInvocationRetryCountExceeded)
		    {
			    reportRequestService.Delete(expiredReport);
			    _logger.Warn($"Report request {expiredReport.RegionAndTypeComputed} deleted from queue. Reason: The report was downloaded successfully but the callback method provided at QueueReport could not be invoked. Retry count exceeded : {_options.ReportReadyCallbackInvocationMaxRetryCount}");
		    }

			reportRequestService.SaveChanges();
	    }

	    private bool IsRequestRetryCountExceeded(ReportRequestEntry reportRequestEntry) => 
			(reportRequestEntry.ReportRequestRetryCount > _options.ReportRequestMaxRetryCount);

		private bool IsReportRequestEntryCallbackInvocationRetryCountExceeded(ReportRequestEntry reportRequestEntry) =>
		    (reportRequestEntry.ReportRequestRetryCount > _options.ReportReadyCallbackInvocationMaxRetryCount); 


		private bool IsExpirationPeriodExceeded(ReportRequestEntry reportRequestEntry) =>
			(DateTime.Compare(reportRequestEntry.DateCreated, DateTime.UtcNow.Subtract(_options.ReportDownloadRequestEntryExpirationPeriod)) < 0);

		public void QueueReportsAccordingToProcessingStatus(IReportRequestCallbackService reportRequestService,
			List<(string ReportRequestId, string GeneratedReportId, string ReportProcessingStatus)> reportGenerationStatuses)
	    {
			foreach (var reportGenerationInfo in reportGenerationStatuses)
			{
				var reportGenerationCallback = reportRequestService.FirstOrDefault(rrc =>
					rrc.RequestReportId == reportGenerationInfo.ReportRequestId
					&& rrc.GeneratedReportId == null);
				if (reportGenerationCallback == null) continue;

				if (reportGenerationInfo.ReportProcessingStatus == "_DONE_")
				{
					reportGenerationCallback.GeneratedReportId = reportGenerationInfo.GeneratedReportId;
					reportGenerationCallback.ReportRequestRetryCount = 0;
					reportRequestService.Update(reportGenerationCallback);
					_logger.Info(
						$"Report was successfully generated by Amazon for {reportGenerationCallback.RegionAndTypeComputed}. GeneratedReportId:'{reportGenerationInfo.GeneratedReportId}'. ProcessingStatus:'{reportGenerationInfo.ReportProcessingStatus}'.");
				}
				else if (reportGenerationInfo.ReportProcessingStatus == "_DONE_NO_DATA_")
				{
					reportRequestService.Delete(reportGenerationCallback);
					_logger.Warn(
						$"Report was successfully generated by Amazon for {reportGenerationCallback.RegionAndTypeComputed} but it didn't contain any data. ProcessingStatus:'{reportGenerationInfo.ReportProcessingStatus}'. Report request is now dequeued.");
				}
				else if (reportGenerationInfo.ReportProcessingStatus == "_SUBMITTED_" ||
				            reportGenerationInfo.ReportProcessingStatus == "_IN_PROGRESS_")
				{
					reportGenerationCallback.GeneratedReportId = null;
					reportGenerationCallback.ReportRequestRetryCount = 0;
					reportRequestService.Update(reportGenerationCallback);
					_logger.Info(
						$"Report generation by Amazon is still in progress for {reportGenerationCallback.RegionAndTypeComputed}. ProcessingStatus:'{reportGenerationInfo.ReportProcessingStatus}'.");
				}
				else if (reportGenerationInfo.ReportProcessingStatus == "_CANCELLED_")
				{
					reportGenerationCallback.RequestReportId = null;
					reportGenerationCallback.GeneratedReportId = null;
					reportGenerationCallback.ReportRequestRetryCount++;
					reportRequestService.Update(reportGenerationCallback);
					_logger.Warn(
						$"Report generation was canceled by Amazon for {reportGenerationCallback.RegionAndTypeComputed}. ProcessingStatus:'{reportGenerationInfo.ReportProcessingStatus}'. Placing report back in report request queue! Retry count is now '{reportGenerationCallback.ReportRequestRetryCount}'.");
				}
				else
				{
					reportGenerationCallback.RequestReportId = null;
					reportGenerationCallback.GeneratedReportId = null;
					reportGenerationCallback.ReportRequestRetryCount++;
					reportRequestService.Update(reportGenerationCallback);
					_logger.Warn(
						$"Report status returned by amazon is {reportGenerationInfo.ReportProcessingStatus} for {reportGenerationCallback.RegionAndTypeComputed}. This status is not yet handled by EasyMws. Placing report back in report request queue! Retry count is now '{reportGenerationCallback.ReportRequestRetryCount}'");
				}
			}
			reportRequestService.SaveChanges();
	    }


	    public ReportRequestEntry GetNextFromQueueOfReportsToDownload(IReportRequestCallbackService reportRequestService)
	    {
			return string.IsNullOrEmpty(_merchantId)
				? null
				: reportRequestService.FirstOrDefault(
					rrc => rrc.AmazonRegion == _region && rrc.MerchantId == _merchantId
					        && rrc.RequestReportId != null
					        && rrc.GeneratedReportId != null
							&& rrc.Details == null);
	    }

		public (MemoryStream report, string md5Hash) DownloadGeneratedReportFromAmazon(ReportRequestEntry reportRequestEntry)
	    {
		    _logger.Info($"Attempting to download the next report in queue from Amazon: {reportRequestEntry.RegionAndTypeComputed}.");

		    var reportResultStream = new MemoryStream();
		    var getReportRequest = new GetReportRequest
		    {
			    ReportId = reportRequestEntry.GeneratedReportId,
			    Report = reportResultStream,
			    Merchant = reportRequestEntry.MerchantId
		    };

		    try
		    {
			    var response = _marketplaceWebServiceClient.GetReport(getReportRequest);

			    var reportContentStream = new MemoryStream();
			    getReportRequest.Report.CopyTo(reportContentStream);
			    reportContentStream.Position = 0;

			    var requestId = response?.ResponseHeaderMetadata?.RequestId ?? "unknown";
			    var timestamp = response?.ResponseHeaderMetadata?.Timestamp ?? "unknown";
			    _logger.Info($"Request to MWS.GetReport was successful! [RequestId:'{requestId}',Timestamp:'{timestamp}']",
				    new RequestInfo(timestamp, requestId));
			    _logger.Info($"Report download from Amazon has succeeded for {reportRequestEntry.RegionAndTypeComputed}.");

				return (reportContentStream, response?.GetReportResult?.ContentMD5);
			}
		    catch (MarketplaceWebServiceException e)
		    {
				_logger.Error($"Request to MWS.GetReport failed! [Message: '{e.Message}', HttpStatusCode:'{e.StatusCode}', ErrorType:'{e.ErrorType}', ErrorCode:'{e.ErrorCode}']", e);
			    return (null, null);
			}
		    catch (Exception e)
		    {
				_logger.Error($"Request to MWS.GetReport failed! [Message: '{e.Message}']", e);
			    return (null, null);
		    }
	    }

	    public void MoveToRetryQueue(IReportRequestCallbackService reportRequestService, ReportRequestEntry reportRequestEntry)
	    {
			reportRequestEntry.ReportRequestRetryCount++;
		    reportRequestEntry.LastRequested = DateTime.UtcNow;
	    }
    }
}

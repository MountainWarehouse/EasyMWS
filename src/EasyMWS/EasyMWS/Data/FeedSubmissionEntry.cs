using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using MountainWarehouse.EasyMWS.Enums;
using MountainWarehouse.EasyMWS.Model;
using Newtonsoft.Json;

namespace MountainWarehouse.EasyMWS.Data
{
	public class FeedSubmissionEntry : IRestrictionableInvocationEntry
    {
	    private string _regionAndType;

	    [NotMapped]
	    public string EntryIdentityDescription
	    {
		    // this field is populated based on ReportRequestData which, once set in the ctor, should never change again for the same entity.
			get { return _regionAndType = _regionAndType ?? $"(FeedType:{FeedType},Region:{AmazonRegion.ToString()},FeedSubmissionId:{FeedSubmissionId},EntryId:{Id})"; }
	    }

	    [Key]
	    public int Id { get; set; }
		public bool IsLocked { get; set; }
	    public int FeedSubmissionRetryCount { get; set; }
	    public int FeedProcessingRetryCount { get; set; }
	    public int ReportDownloadRetryCount { get; set; }
	    public int InvokeCallbackRetryCount { get; set; }
		public DateTime LastSubmitted { get; set; }
        public string LastAmazonFeedProcessingStatus { get; set; }
        public DateTime DateCreated { get; set; }

        #region Callback data necessary to invoke a method with it's argument values.
        public string TargetHandlerId { get; set; }
        public string TargetHandlerArgs { get; set; }
        public string InstanceId { get; set; }
		#endregion

		#region Data necessary to request a report from amazon.
	    public AmazonRegion AmazonRegion { get; set; }
	    public string FeedType { get; set; }
	    public string MerchantId { get; set; }
		public string FeedSubmissionData { get; set; }
		#endregion

		#region Additional data generated by amazon in the process of fetching reports

	    public string FeedSubmissionId { get; set; }
	    public bool IsProcessingComplete { get; set; }
	    public bool HasErrors { get; set; }
	    public string SubmissionErrorData { get; set; }


	    public virtual FeedSubmissionDetails Details { get; set; }

	    #endregion

		[Obsolete("This constructor should never be used directly. But it has to exist as required by EF. Use other overloads instead!")]
		public FeedSubmissionEntry()
		{
		}

	    public FeedSubmissionEntry(string feedSubmissionData)
	    {
			if( string.IsNullOrEmpty(feedSubmissionData))
				throw new ArgumentException("FeedSubmissionEntry data not provided, but it is required");

		    FeedSubmissionData = feedSubmissionData;
            LastAmazonFeedProcessingStatus = null;
        }
	}

	internal static class FeedSubmissionCallbackExtensions
	{
		internal static FeedSubmissionPropertiesContainer GetPropertiesContainer(this FeedSubmissionEntry source)
		{
			return JsonConvert.DeserializeObject<FeedSubmissionPropertiesContainer>(source.FeedSubmissionData);
		}
	}
}

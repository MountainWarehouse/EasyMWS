using System;
using System.IO;
using MountainWarehouse.EasyMWS.Enums;
using MountainWarehouse.EasyMWS.Model;

namespace MountainWarehouse.EasyMWS.Client
{
	/// <summary>
	/// EasyMws client for downloading reports from Amazon / submitting feeds to Amazon.<para/>
	/// This client type expects callback method references when queuing reports or feeds, and invokes those callback methods when the respective actions have happened.
	/// </summary>
    public interface IEasyMwsClient
    {
		/// <summary>
		/// The amazon region used to initialize the client
		/// </summary>
		AmazonRegion AmazonRegion { get; }

		/// <summary>
		/// The merchant id used to initialize the client (also known as seller Id).
		/// </summary>
		string MerchantId { get; }

		/// <summary>
		/// The set of options used to initialize the client.
		/// </summary>
		EasyMwsOptions Options { get; }

		/// <summary>
		/// Method that drives the lifecycle of requesting reports from Amazon or submitting feeds to Amazon.
		/// It is handling the following operations : 
		/// 1. Requests the next report from report request queue from Amazon, if a ReportRequestId is successfully generated by amazon then the ReportRequest is moved in a queue of reports awaiting Amazon generation.
		///    If a ReportRequestId is not generated by amazon, a configurable retry policy will be applied.
		/// 2. Query amazon if any of the reports that are pending generation, were generated.
		///    If any reports were successfully generated (returned report processing status is "_DONE_"), those reports are moved to a queue of reports that await downloading.
		///    If any reports requests were canceled by amazon (returned report processing status is "_CANCELLED_"), then those ReportRequests are moved back to the report request queue.
		///    If amazon returns a processing status any other than "_DONE_" or "_CANCELLED_" for any report requests, those ReportRequests are moved back to the report request queue.
		/// 3. Downloads the next report from amazon (which is the next report ReportRequest in the queue of reports awaiting download).
		/// 4. Perform a callback of the handler method provided as argument when QueueReport was called. The report content can be obtained by reading the stream argument of the callback method.
		/// 5. Perform a similar lifecycle for queued feeds.
		/// </summary>
		void Poll();

	    /// <summary>
	    /// Add a new ReportRequest to a queue of requests that are going to be processed, with the final result of trying to download the respective report from Amazon.
	    /// </summary>
	    /// <param name="reportRequestContainer">An object that contains the arguments required to request the report from Amazon. This object is meant to be obtained by calling a ReportRequestFactory, ex: IReportRequestFactoryFba.</param>
	    /// <param name="callbackMethod">A delegate for a method that is going to be called once a report has been downloaded from amazon. The 'Stream' argument of that method will contain the actual report content.</param>
	    /// <param name="callbackData">An object that contains any argument(s) needed to invoke the delegate 'callbackMethod'</param>
		void QueueReport(ReportRequestPropertiesContainer reportRequestContainer, Action<Stream, object> callbackMethod, object callbackData);

	    /// <summary>
	    /// Add a new FeedSubmissionRequest to a queue of feeds to be submitted to amazon, with the final result of obtaining of posting the feed data to amazon and obtaining a response.
	    /// </summary>
	    /// <param name="feedSubmissionContainer">An object that contains the arguments required to submit a feed to Amazon.</param>
	    /// <param name="callbackMethod">A delegate for a method that is going to be called once a feed has been submitted to amazon.</param>
	    /// <param name="callbackData">An object that contains any argument(s) needed to invoke the delegate 'callbackMethod'</param>
		void QueueFeed(FeedSubmissionPropertiesContainer feedSubmissionContainer, Action<Stream, object> callbackMethod, object callbackData);

		/// <summary>
		/// Purges the queue of report request entries for the current client instance corresponding to a pair of AmazonRegion and MerchantId
		/// </summary>
	    void PurgeReportRequestEntriesQueue();

		/// <summary>
		/// Purges the queue of feed submission entries for the current client instance corresponding to a pair of AmazonRegion and MerchantId
		/// </summary>
		void PurgeFeedSubmissionEntriesQueue();

    }
}
